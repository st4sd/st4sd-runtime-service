language: python

services:
  - docker

install: echo "no install"

stages:
  - name: test
    if: tag IS blank
  - name: image
    if: branch = main AND type != pull_request
  - name: multiarch
    if: branch = main AND type != pull_request
  - name: deploy-to-dev
    if: branch = main AND type != pull_request
  - name: new-git-release
    if: tag is present

before_script:
  - export DOCKER_REGISTRY=${DOCKER_REGISTRY:-quay.io}
  - export IMAGE_NAME=${IMAGE_NAME:-/st4sd/official-base/st4sd-runtime-service}
  - export IMAGE_BASE_URL="${DOCKER_REGISTRY}${IMAGE_NAME}"
  - export RUNTIMECORE_IMAGE_NAME=${ROOT_IMAGE_NAME:-/st4sd/official-base/st4sd-runtime-core}
  - export RUNTIMECORE_URL="${DOCKER_REGISTRY}${RUNTIMECORE_IMAGE_NAME}"
  - export BUILDKIT_PROGRESS=plain

matrix:
  include:
    - stage: test
      services:
        - docker
      env:
        BUILD_PYTHON_VERSION=310
      script:
        - docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_TOKEN}" "${DOCKER_REGISTRY}"
        - docker build -t ${IMAGE_BASE_URL}:py${BUILD_PYTHON_VERSION} -f Dockerfile .
        - docker build -t ${IMAGE_BASE_URL}:py${BUILD_PYTHON_VERSION}-test
          --build-arg base_image=${IMAGE_BASE_URL}:py${BUILD_PYTHON_VERSION} -f Dockerfile.test .


    - stage: image
      os: linux
      python: "3.10"
      env:
        - BUILD_PYTHON_VERSION=310
      script:
        - docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_TOKEN}" "${DOCKER_REGISTRY}"
        - docker build --pull -t ${IMAGE_BASE_URL}:py${BUILD_PYTHON_VERSION}-latest-`arch` -f Dockerfile .
          --build-arg base_image=${RUNTIMECORE_URL}:py${BUILD_PYTHON_VERSION}-latest-`arch`
        - docker push ${IMAGE_BASE_URL}:py${BUILD_PYTHON_VERSION}-latest-`arch`

      # VV: Disabling PPC64LE builds for now
      #- stage: image
      #  os: linux-ppc64le
      #  script:
      #- docker login -u "${DOCKER_USERNAME}" -p "${DOCKER_TOKEN}" "${DOCKER_REGISTRY}"
      #- docker build --pull -t ${IMAGE_BASE_URL}:latest-`arch` -f Dockerfile .
      #  --build-arg base_image=${RUNTIMECORE_URL}
      #- docker push ${IMAGE_BASE_URL}:latest-`arch`

    - stage: multiarch
      os: linux
      python: "3.10"
      env:
      - BUILD_PYTHON_VERSION=310
      script:
        - export SRC_TAG_X8664="py${BUILD_PYTHON_VERSION}-latest-x86_64"
        - export DST_TAG_X8664="py${BUILD_PYTHON_VERSION}-x86_64"
        # VV: Disable ppc64le builds for now
        #- export SRC_TAG_PPC64LE="latest-ppc64le"
        #- export DST_TAG_PPC64LE="ppc64le"
        - export LABEL="py${BUILD_PYTHON_VERSION}-latest"
        # VV: Also push as `x86_64` and `latest`
        - ./deploy/build_multiarch.sh x86_64 latest

    - stage: deploy-to-dev
      os: linux
      env:
        DEPLOY_TO="ve-5446-dev"
      script:
        - ./deploy/redeploy_deploymentconfig.sh
          "${VE_5446_DEV_PROJECT}" "${VE_5446_DEV_LOGIN_URL}" "${VE_5446_DEV_LOGIN_TOKEN}"

    - stage: new-git-release
      os: linux
      services: docker
      script:
        - export DOCKER_CLI_EXPERIMENTAL=enabled
        - cd deploy
        - export IMAGE_SRC="${IMAGE_BASE_URL}:latest"
        - export IMAGE_DEST="${IMAGE_BASE_URL}:${TRAVIS_TAG}"
        - docker run --rm -it 
          --env DOCKER_REGISTRY --env DOCKER_TOKEN --env DOCKER_USERNAME
          -v `pwd`:/scripts -w /scripts --entrypoint /scripts/skopeo_copy.sh quay.io/skopeo/stable
          ${IMAGE_SRC} ${IMAGE_DEST}
        - export IMAGE_DEST="${IMAGE_BASE_URL}:release-candidate"
        - docker run --rm -it
          --env DOCKER_REGISTRY --env DOCKER_TOKEN --env DOCKER_USERNAME
          -v `pwd`:/scripts -w /scripts --entrypoint /scripts/skopeo_copy.sh quay.io/skopeo/stable
          ${IMAGE_SRC} ${IMAGE_DEST}