swagger: '2.0'
basePath: /
consumes:
- application/json
definitions:
  container-image:
    properties:
      name:
        description: The container image url
        type: string
    type: object
  container-resources:
    properties:
      cpu:
        description: Cpu units to as a limit for the container (e.g. 0.1, 1)
        example: '1'
        type: string
      memory:
        description: Memory defined as either bytes, mebibytes (e.g. 100Mi which is
          104857600 bytes), or gibibytes (100Gi)
        example: 500Mi
        type: string
    type: object
  data-filename:
    properties:
      name:
        description: The name of the data file
        type: string
    type: object
  dataset-s3-configuration:
    properties:
      accessKeyID:
        default: ''
        description: Access key id
        type: string
      bucket:
        default: ''
        description: Name of bucket
        type: string
      endpoint:
        default: ''
        description: Endpoint URL (e.g. https://s3.eu-gb.cloud-object-storage.appdomain.cloud)
        type: string
      region:
        default: ''
        description: Region (optional)
        type: string
      secretAccessKey:
        default: ''
        description: Secret access key
        type: string
    required:
    - accessKeyID
    - bucket
    - endpoint
    - secretAccessKey
    type: object
  executionoptiondefaults:
    properties:
      variables:
        default: []
        description: The default values of the variables in the virtual experiment
          DSL
        items:
          $ref: '#/definitions/variablewithdefaultvalues'
        type: array
    type: object
  experiment-instance:
    properties:
      experiment:
        $ref: '#/definitions/ve'
      id:
        type: string
      k8s-labels:
        example:
          rest-uid: ionisation-energy-z3u2c
        type: object
      outputs:
        example:
          AnionResults:
            creationtime: '2019-12-04 19:00:54.993316'
            description: Anion homo/lumo results
            filename: energies.csv
            filepath: /tmp/workdir/ionisation-energy-2019-12-04T181218.613966.instance/output/energies.csv
            final: 'no'
            production: 'yes'
            type: csv
            version: '14'
        type: object
      status:
        $ref: '#/definitions/experiment-status'
    required:
    - id
    type: object
  experiment-lambda-start:
    properties:
      additionalOptions:
        items:
          description: Additional options to elaunch.py
          example: --registerWorkflow=True
          type: string
        type: array
      data:
        items:
          $ref: '#/definitions/file-content'
        type: array
      datasetStoreURI:
        description: Dataset URI to store outputs (uses github.com/datashim-io/datashim)
          i.e. dataset://<dataset-name>/path/in/dataset/to/upload/outputs/to. Mutually
          exclusive with s3Store.
        type: string
      environmentVariables:
        example:
          RUNTIME_SECRET_TOKEN: <token>
        type: object
      lambdaFlowIR:
        description: JSON representation of FlowIR
        example:
          flowir key: flowir value
        type: object
      metadata:
        example:
          exp-label: no-spaces-allowed
        type: object
      orchestrator_resources:
        allOf:
        - $ref: '#/definitions/container-resources'
        description: Hardware resource limits for the container that is hosting the
          workflow orchestrator
      s3:
        allOf:
        - $ref: '#/definitions/s3'
        description: S3 configuration (read the description of the Filename-Content
          pair model too)
      s3Store:
        allOf:
        - $ref: '#/definitions/s3-output'
        description: Configuration to store outputs of workflow instance to a S3 bucket.
          Mutually exclusive with datasetStoreURI
      scripts:
        description: Scripts to placed under the `bin` directory of the experiment
        items:
          $ref: '#/definitions/file-content'
        type: array
      variables:
        example:
          functional: B3LYPV3
          numberMolecules: 2
          startIndex: 10
        type: object
      volumes:
        items:
          $ref: '#/definitions/mount-volume'
        type: array
    type: object
  experiment-start:
    properties:
      additionalOptions:
        description: Additional options to orchestrator that executes this experiment
        items:
          example: --registerWorkflow=True
          type: string
        type: array
      data:
        default: []
        description: The data files to the experiment, following the parameterisation
          settings (if any)
        items:
          $ref: '#/definitions/file-content'
        type: array
      datasetStoreURI:
        description: Dataset URI to store outputs (uses github.com/datashim-io/datashim)
          i.e. dataset://<dataset-name>/path/in/dataset/to/upload/outputs/to. Mutually
          exclusive with s3Store.
        type: string
      environmentVariables:
        default: {}
        description: 'key: value environment variables to inject in the pod which
          hosts the orchestrator of the experiment'
        type: object
      inputs:
        default: []
        description: The required inputs to the experiment (if any)
        items:
          $ref: '#/definitions/file-content'
        type: array
      metadata:
        default: {}
        description: 'key: value metadata values to associate with the experiment.
          The orchestrator will use these values to populate the userMetadata document
          in the ST4SD Datastore, should the experiment be registered with the datastore'
        type: object
      orchestrator_resources:
        allOf:
        - $ref: '#/definitions/container-resources'
        description: Hardware resource limits for the container that is hosting the
          workflow orchestrator
      platform:
        description: The platform to use for the execution of the virtual experiment.
          It should match the parameterisation options of the parameterised virtual
          experiment package you are starting.
        type: string
      runtimePolicy:
        $ref: '#/definitions/experiment-start-policy'
      s3:
        allOf:
        - $ref: '#/definitions/s3'
        description: S3 configuration (read the description of the Filename-Content
          pair model too)
      s3Store:
        allOf:
        - $ref: '#/definitions/s3-output'
        default: {}
        description: Configuration to store outputs of workflow instance to a S3 bucket.
          Mutually exclusive with datasetStoreURI
      variables:
        default: {}
        description: 'key: value variable pairs (must follow the parameterisation
          settings)'
        type: object
      volumes:
        default: []
        description: Optional volumes to mount in the pods
        items:
          $ref: '#/definitions/mount-volume'
        type: array
    type: object
  experiment-start-policy:
    properties:
      config:
        description: Configuration options for runtime policy
        example: {}
        type: object
      name:
        description: Nane of runtime policy
        type: string
    type: object
  experiment-status:
    properties:
      current-stage:
        type: string
      error-description:
        type: string
      exit-status:
        type: string
      experiment-state:
        example: running
        type: string
      meta:
        type: object
      stage-progress:
        type: number
      stage-state:
        example: running
        type: string
      stages:
        items:
          type: string
        type: array
      total-progress:
        type: number
    required:
    - experiment-state
    - stage-progress
    - stage-state
    - total-progress
    type: object
  file-content:
    properties:
      content:
        description: Content of file. Mutually exclusive with sourceFilename and targetFilename
        example: 'mole:capb,slampd,smlta

          conc:4.2,1.4,0.5

          salt:2.8'
        type: string
      filename:
        description: Filename. Mutually exclusive with sourceFilename and targetFilename
        example: field.conf
        type: string
      sourceFilename:
        description: path to the filename. Mutually exclusive with filename and content.
          If set, must also provide sourceFilename
        type: string
      targetFilename:
        description: How to rename sourceFilename. Mutually exclusive with filename
          and content. If set, must also provide targetFilename
        type: string
    type: object
  imagepullsecret:
    properties:
      password:
        type: string
      server:
        description: docker registry, e.g. res-drl-hpc-docker-local.artifactory.swg-devops.com
        example: url-docker-registry
        type: string
      username:
        description: username to use when authenticating to docker registry
        type: string
    required:
    - password
    - server
    - username
    type: object
  input-filename:
    properties:
      name:
        description: The name of the input file
        type: string
    type: object
  internal-experiment:
    properties:
      pvep:
        allOf:
        - $ref: '#/definitions/ve'
        description: The Parameterised Virtual Experiment Package that parameterizes
          the execution of the workflow
      workflow:
        allOf:
        - $ref: '#/definitions/internal-experiment-workflow'
        description: The definition of the workflow
    type: object
  internal-experiment-workflow:
    properties:
      dsl:
        description: The dictionary representing an experiment in DSL format
        type: object
    type: object
  library-graph:
    properties:
      components:
        items:
          description: The DSL 2.0 definition of a component template, there must
            be at least one.
          type: object
        type: array
      entrypoint:
        description: The DSL 2.0 definition of the entrypoint - optional if there
          is exactly 1 workflow template. If set, it must point to a workflow template
        type: object
      workflows:
        items:
          description: The DSL 2.0 definition of a workflow template, there must be
            at least one.
          type: object
        type: array
    type: object
  mount-volume:
    properties:
      applicationDependency:
        description: Application dependency for which flow will create a link that
          points to the mount-path of this volume (optional). This is expected to
          be an entry under the list of strings defined by the application-dependencies.<platform-name>
          field within the FlowIR of the workflow.
        type: string
      subPath:
        description: Path within the volume from which the container's volume should
          be mounted. Defaults to "" (volume's root).
        type: string
      type:
        allOf:
        - $ref: '#/definitions/volume-type'
        default: {}
        description: Volume type definition
    type: object
  option-valuefrom-secretkeyref:
    properties:
      key:
        description: Name of the key inside the Kubernetes Secret object
        type: string
      name:
        description: Name of the Kubernetes Secret object
        type: string
    required:
    - name
    type: object
  orchestratorresources:
    properties:
      cpu:
        description: How many cores to request for the orchestrator executing the
          workflow
        type: string
      memory:
        description: How much memory to request for the orchestrator executing the
          workflow
        type: string
    type: object
  package-history:
    properties:
      tags:
        items:
          $ref: '#/definitions/package-history-tag'
        type: array
      untagged:
        items:
          $ref: '#/definitions/package-history-untagged'
        type: array
    type: object
  package-history-tag:
    properties:
      head:
        description: The digest that the tag points to
        example: sha256x67357eeed694e4f954fda270d6adba7b2399823c1b30dd1513d9e8c08d919399
        type: string
      tag:
        description: The tag e.g. latest
        example: latest
        type: string
    type: object
  package-history-untagged:
    properties:
      digest:
        description: A digest which is no longer the head of any of the tags
        example: sha256xd5067fc65aa4b569348caf347ca76983f6ecd2e45cc708410ba806f3835905ef
        type: string
    type: object
  query-experiment-common:
    properties:
      matchPackageVersion:
        default: false
        description: Whether to match the version of packages
        type: boolean
      mustHaveOnePackage:
        default: true
        description: Match only parameterised virtual experiment packages with just
          one base package
        type: boolean
    type: object
  query-experiments:
    properties:
      common:
        $ref: '#/definitions/query-experiment-common'
      package:
        $ref: '#/definitions/query-experiments-package'
      relationship:
        $ref: '#/definitions/query-experiments-relationship'
    type: object
  query-experiments-package:
    properties:
      definition:
        $ref: '#/definitions/ve-base-package'
    type: object
  query-experiments-relationship:
    properties:
      identifier:
        description: The identifier of the relationship
        type: string
      transform:
        $ref: '#/definitions/query-experiments-relationship-transform'
    type: object
  query-experiments-relationship-transform:
    properties:
      matchInputGraph:
        default: false
        description: Whether to query using the package of the inputGraph
        type: boolean
      matchOutputGraph:
        default: false
        description: Whether to query using the package of the inputGraph
        type: boolean
    type: object
  query-relationships:
    properties:
      identifier:
        description: Regular expression to match names of relationships
        type: string
      transform:
        $ref: '#/definitions/query-relationships-transform'
    type: object
  query-relationships-transform:
    properties:
      inputGraph:
        $ref: '#/definitions/query-relationships-transform-inputgraph'
      outputGraph:
        $ref: '#/definitions/query-relationships-transform-outputgraph'
    type: object
  query-relationships-transform-inputgraph:
    properties:
      identifier:
        description: The parameterised virtual experiment package containing the inputGraph
        type: string
    required:
    - identifier
    type: object
  query-relationships-transform-outputgraph:
    properties:
      identifier:
        description: Regular expression to match the identifiers of outputGraphs in
          transform relationships
        type: string
    type: object
  relationship:
    properties:
      description:
        description: Human readable description of transformation relationship
        type: string
      identifier:
        example: pm3-to-dft
        type: string
      transform:
        $ref: '#/definitions/relationship-transform'
    required:
    - identifier
    type: object
  relationship-synthesize:
    properties:
      options:
        $ref: '#/definitions/relationship-synthesize-options'
      parameterisation:
        $ref: '#/definitions/ve-parameterisation'
    type: object
  relationship-synthesize-options:
    properties:
      generateParameterisation:
        default: true
        description: Whether to auto-generate parameterisation options. When False
          the method will not auto-generate any parameterisation configuration for
          the synthesized parameterised virtual experiment package. When True the
          method generates 1 preset for each variable in the final experiment which
          has a unique value. It overrides this information using the presets/executionOptions
          of the parent(outputGraph). It overrides this merged information using the
          "parameterisation" settings that are part of this payload. The default is
          `True`
        type: boolean
    type: object
  relationship-transform:
    properties:
      inputGraph:
        $ref: '#/definitions/query-relationships-transform-inputgraph'
      outputGraph:
        $ref: '#/definitions/query-relationships-transform-outputgraph'
      relationship:
        $ref: '#/definitions/relationship-transform-relationship'
    type: object
  relationship-transform-relationship:
    properties:
      graphParameters:
        items:
          $ref: '#/definitions/relationship-transform-relationship-graphparameters'
        type: array
      graphResults:
        items:
          $ref: '#/definitions/relationship-transform-relationship-graphresults'
        type: array
      inferParameters:
        default: true
        description: Whether to auto-update relationship with information about mappings
          bettween parameters of the 2 graph fragments
        type: boolean
      inferResults:
        default: true
        description: Whether to auto-update relationship with information about mappings
          bettween results of the 2 graph fragments
        type: boolean
    type: object
  relationship-transform-relationship-graphparameters:
    properties:
      inputGraphParameter:
        $ref: '#/definitions/relationship-transform-relationship-graphpvalue'
      outputGraphParameter:
        $ref: '#/definitions/relationship-transform-relationship-graphpvalue'
    type: object
  relationship-transform-relationship-graphpvalue:
    properties:
      default:
        description: An optional default value that the symbolic name may contain
        type: string
      name:
        description: Symbolic name
        type: string
    type: object
  relationship-transform-relationship-graphresults:
    properties:
      inputGraphResult:
        $ref: '#/definitions/relationship-transform-relationship-graphpvalue'
      outputGraphResult:
        $ref: '#/definitions/relationship-transform-relationship-graphpvalue'
    type: object
  s3:
    properties:
      accessKeyID:
        default: ''
        description: Access key id
        type: string
      bucket:
        default: ''
        description: Name of bucket
        type: string
      dataset:
        description: Identifier of Dataset to use (uses https://github.com/datashim-io/datashim).
          If set, remaining S3 information will not be used
        type: string
      endpoint:
        default: ''
        description: Endpoint URL (e.g. https://s3.eu-gb.cloud-object-storage.appdomain.cloud)
        type: string
      region:
        default: ''
        description: Region (optional)
        type: string
      secretAccessKey:
        default: ''
        description: Secret access key
        type: string
    type: object
  s3-credentials:
    properties:
      accessKeyID:
        description: Access key id
        type: string
      bucket:
        description: Name of bucket
        type: string
      endpoint:
        description: Endpoint URL (e.g. https://s3.eu-gb.cloud-object-storage.appdomain.cloud)
        type: string
      region:
        description: Region (optional)
        type: string
      secretAccessKey:
        description: Secret access key
        type: string
    type: object
  s3-output:
    properties:
      bucketPath:
        description: The ST4SD runtime core will upload the workflow outputs under
          this path
        type: string
      credentials:
        allOf:
        - $ref: '#/definitions/s3-credentials'
        description: S3 Configuration
    required:
    - bucketPath
    - credentials
    type: object
  utilities-dsl:
    properties:
      components:
        description: An array of component blueprints
        items:
          description: One component blueprint
          type: object
        type: array
      entrypoint:
        description: The entrypoint definition
        type: object
      workflows:
        description: An array of workflow definition
        items:
          description: One workflow blueprint
          type: object
        type: array
    type: object
  utilities-pvep:
    properties:
      dsl:
        description: The DSL 2.0 definition of a workflow
        type: object
    type: object
    x-mask: '{pvep}'
  valueinplatform:
    properties:
      platform:
        type: string
      value:
        type: string
    type: object
  variablewithdefaultvalues:
    properties:
      name:
        type: string
      valueFrom:
        default: []
        items:
          $ref: '#/definitions/valueinplatform'
        type: array
    type: object
  ve:
    properties:
      base:
        allOf:
        - $ref: '#/definitions/ve-base'
        description: The configuration of the base packages
      metadata:
        allOf:
        - $ref: '#/definitions/ve-metadata'
        description: Metadata of the parameterised virtual experiment package
      parameterisation:
        allOf:
        - $ref: '#/definitions/ve-parameterisation'
        description: The parameterisation options
    required:
    - base
    - metadata
    type: object
  ve-base:
    properties:
      packages:
        default: []
        description: The packages that make up this parameterised virtual experiment
          package
        items:
          $ref: '#/definitions/ve-base-package'
        type: array
    required:
    - packages
    type: object
  ve-base-package:
    properties:
      config:
        allOf:
        - $ref: '#/definitions/ve-base-package-config'
        description: Configuration options for the package
      name:
        default: main
        description: Unique name of base package in this virtual experiment entry.
          Defaults to "main"
        type: string
      source:
        allOf:
        - $ref: '#/definitions/ve-base-package-source'
        description: Information on the location of the package
    required:
    - source
    type: object
  ve-base-package-config:
    properties:
      manifestPath:
        description: The path to the manifest file in the package
        type: string
      path:
        description: The path to the workflow definition in the package
        type: string
    type: object
  ve-base-package-source:
    properties:
      dataset:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-dataset'
        description: The configuration for a package that exists on a Dataset. Mutually
          exclusive with @git
      git:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-git'
        description: The configuration for a package that exists on a git server.
          Mutually exclusive with @dataset
    type: object
  ve-base-package-source-dataset:
    properties:
      location:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-dataset-info'
        description: The Dataset which holds the package
      security:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-dataset-info'
        description: The information required to get the package from the dataset
      version:
        description: The version of the package
        type: string
    required:
    - location
    type: object
  ve-base-package-source-dataset-info:
    properties:
      dataset:
        description: The name of the dataset
        type: string
    required:
    - dataset
    type: object
  ve-base-package-source-git:
    properties:
      location:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-git-location'
        description: The location of the package on git
      security:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-git-security'
        description: The information required to get the package from git
      version:
        description: The commit id of the package on git
        type: string
    required:
    - location
    type: object
  ve-base-package-source-git-location:
    properties:
      branch:
        description: Git branch name, mutually exclusive with @tag and @commit
        type: string
      commit:
        description: Git commit digest, mutually exclusive with @branch and @tag
        type: string
      tag:
        description: Git tag name, mutually exclusive with @branch and @commit
        type: string
      url:
        description: Git url, must provide this if package is hosted on a Git server
        type: string
    required:
    - url
    type: object
  ve-base-package-source-git-security:
    properties:
      oauth:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-git-security-oauth'
        description: The oauth-token to use when retrieving the package from git
    type: object
  ve-base-package-source-git-security-oauth:
    properties:
      value:
        description: The value of the oauth-token, when using this field the runtime
          service will store the token in a new Kubernetes Secret and update the Parameterised
          Virtual Experiment Package to reference the Secret instead of the oauth-token
          directly. Mutually exclusive with @valueFrom
        type: string
      valueFrom:
        allOf:
        - $ref: '#/definitions/ve-base-package-source-git-security-oauth-valuefrom'
        description: A pointer to the oauth-token. Mutually exclusive with @value
    type: object
  ve-base-package-source-git-security-oauth-valuefrom:
    properties:
      secretKeyRef:
        allOf:
        - $ref: '#/definitions/option-valuefrom-secretkeyref'
        description: Description of the Kubernetes Secret key that contains the value
          of the oauth-token
    type: object
  ve-metadata:
    properties:
      package:
        allOf:
        - $ref: '#/definitions/ve-metadata-package'
        description: Metadata aboud the parameterised virtual experiment package
      registry:
        allOf:
        - $ref: '#/definitions/ve-metadata-registry'
        description: Metadata that the registry generates
    required:
    - package
    type: object
  ve-metadata-package:
    properties:
      description:
        description: The description of the parameterised virtual experiment package
        type: string
      keywords:
        default: []
        description: Keywords associated with the parameterised virtual experiment
          package
        items:
          type: string
        type: array
      license:
        description: The license of the parameterised virtual experiment package
        type: string
      maintainer:
        description: The maintainer of the parameterised virtual experiment package
        type: string
      name:
        description: The name of the parameterised virtual experiment package
        type: string
      tags:
        default: []
        description: The tags associated with the parameterised virtual experiment
          package
        items:
          type: string
        type: array
    required:
    - name
    type: object
  ve-metadata-registry:
    properties:
      containerImages:
        default: []
        items:
          $ref: '#/definitions/container-image'
        type: array
      createdOn:
        type: string
      data:
        items:
          $ref: '#/definitions/data-filename'
        type: array
      digest:
        type: string
      executionOptionsDefaults:
        $ref: '#/definitions/executionoptiondefaults'
      inputs:
        default: []
        items:
          $ref: '#/definitions/input-filename'
        type: array
      interface:
        default: {}
        type: object
      tags:
        default: []
        items:
          type: string
        type: array
      timesExecuted:
        default: 0
        type: integer
    type: object
  ve-parameterisation:
    properties:
      executionOptions:
        allOf:
        - $ref: '#/definitions/ve-parameterisation-executionoptions'
        description: Parameterisation options for settings that users can override
          at execution time (within constraints)
      presets:
        allOf:
        - $ref: '#/definitions/ve-parameterisation-presets'
        description: Parameterisation options for settings that users cannot override
          at execution time
    type: object
  ve-parameterisation-executionoptions:
    properties:
      data:
        default: []
        description: Parameterisation options for data files which the users can override
          at execution time
        items:
          $ref: '#/definitions/data-filename'
        type: array
      platform:
        default: []
        description: Parameterisation options for the platform to specialize the workflow
          at execution time.The users can override this option at execution time (within
          constraints)
        items:
          type: string
        type: array
      variables:
        default: []
        description: Parameterisation options for variables which the users can override
          at execution time (within constraints)
        items:
          $ref: '#/definitions/ve-parameterisation-executionoptions-variable'
        type: array
    type: object
  ve-parameterisation-executionoptions-variable:
    properties:
      name:
        type: string
      value:
        description: This is the default value of the variable, providing this field
          means that the variable can recieve *any* value
        type: string
      valueFrom:
        description: An array of choices that this variable must be set to. If at
          execution time the variable does not receive a value, then the default value
          is the first value in this array
        items:
          $ref: '#/definitions/ve-parameterisation-executionoptions-variable-choice'
        type: array
    type: object
  ve-parameterisation-executionoptions-variable-choice:
    properties:
      value:
        description: The value of the variable, must be compatible with the parameterisation
          options of the parameterised virtual experiment package
        type: string
    type: object
  ve-parameterisation-presets:
    properties:
      data:
        default: []
        description: The configuration for data-files
        items:
          $ref: '#/definitions/data-filename'
        type: array
      environmentVariables:
        default: []
        description: Environment variables to inject into the processes that orchestrate
          the execution of the workflow
        items:
          $ref: '#/definitions/ve-parameterisation-presets-environment-variables'
        type: array
      platform:
        description: The platform to specialize the workflow for
        type: string
      runtime:
        allOf:
        - $ref: '#/definitions/ve-parameterisation-runtime'
        description: The runtime configuration of the orchestrator executing the workflow
      variables:
        default: []
        description: The preset variables
        items:
          $ref: '#/definitions/ve-parameterisation-presets-variable'
        type: array
    type: object
  ve-parameterisation-presets-environment-variables:
    properties:
      name:
        description: Name of the environment variable to inject into the containers
          in the orchestrator pod
        type: string
      value:
        description: The value of the environment variable
        type: string
    required:
    - name
    - value
    type: object
  ve-parameterisation-presets-variable:
    properties:
      name:
        description: The name of the variable
        type: string
      value:
        description: The preset value of the variable
        type: string
    required:
    - name
    - value
    type: object
  ve-parameterisation-runtime:
    properties:
      args:
        default: []
        description: Commandline arguments to the orchestrator executing the workflow
        items:
          type: string
        type: array
      resources:
        allOf:
        - $ref: '#/definitions/orchestratorresources'
        description: Resource requests for the orchestrator executing the workflow
    type: object
  volume-type:
    properties:
      configMap:
        description: (VOLUME_TYPE) name of ConfigMap to mount, incompatible with other
          VOLUME_TYPE fields
        type: string
      dataset:
        description: (VOLUME_TYPE) name of Dataset object to mount, incompatible with
          other VOLUME_TYPE fields
        type: string
      persistentVolumeClaim:
        description: (VOLUME_TYPE) name of PersistentVolumeClaim to mount, incompatible
          with other VOLUME_TYPE fields
        type: string
      secret:
        description: (VOLUME_TYPE) name of Secret object to mount, incompatible with
          other VOLUME_TYPE fields
        type: string
    type: object
info:
  description: Launch/Monitor/Stop experiments
  title: Runtime Service of the Simulation Toolkit for Scientific Discovery (ST4SD)
  version: '1.0'
paths:
  /authorisation/token:
    get:
      operationId: get_authorisation_token
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorised
        '403':
          description: Unauthorised
        '500':
          description: Internal error while retrieving token
      summary: Returns a token that can be used to authenticate to the service
      tags:
      - authorisation
  /datasets/:
    get:
      operationId: get_dataset_list
      responses:
        '400':
          description: Unable to list Dataset resource - ensure that Dataset Lifecycle
            Framework is installed
      tags:
      - datasets
  /datasets/s3/{id}:
    parameters:
    - description: The Dataset identifier
      in: path
      name: id
      required: true
      type: string
    post:
      operationId: post_dataset
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/dataset-s3-configuration'
      responses:
        '400':
          description: Unable to create dataset - ensure that the Dataset Lifecycle
            Framework is installed
        '409':
          description: Dataset already exists
      tags:
      - datasets
  /experiments/:
    get:
      operationId: get_experiment_list
      parameters:
      - default: json
        description: Output format
        enum:
        - json
        - python
        - python-pretty
        in: query
        name: outputFormat
        type: string
      - default: n
        description: Whether to hide hte registry metadata or not
        enum:
        - y
        - n
        in: query
        name: hideMetadataRegistry
        type: string
      - default: y
        description: Whether to hide fields whose value is None
        enum:
        - y
        - n
        in: query
        name: hideNone
        type: string
      - default: y
        description: Whether to hide Beta fields
        enum:
        - y
        - n
        in: query
        name: hideBeta
        type: string
      responses:
        '200':
          description: Success
      summary: List all experiments
      tags:
      - experiments
    post:
      operationId: post_experiment_list
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/ve'
      responses:
        '200':
          description: OK
        '400':
          description: Experiment ID is invalid
        '409':
          description: Experiment ID already exists
      summary: Add an experiment
      tags:
      - experiments
  /experiments/lambda/start:
    post:
      operationId: post_lambda_experiment_start
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/experiment-lambda-start'
      responses:
        '200':
          description: <id_of_new_experiment_instance>
        '400':
          description: Malformed experiment creation request
        '500':
          description: Internal error while creating experiment
      summary: Start a lambda experiment
      tags:
      - experiments
  /experiments/{identifier}:
    delete:
      operationId: delete_experiment
      responses:
        '200':
          description: Success
        '404':
          description: Unknown experiment
        '500':
          description: Internal error
      summary: Delete an experiment
      tags:
      - experiments
    get:
      operationId: get_experiment
      parameters:
      - default: json
        description: Output format
        enum:
        - json
        - python
        - python-pretty
        in: query
        name: outputFormat
        type: string
      - default: n
        description: Whether to hide hte registry metadata or not
        enum:
        - y
        - n
        in: query
        name: hideMetadataRegistry
        type: string
      - default: y
        description: Whether to hide fields whose value is None
        enum:
        - y
        - n
        in: query
        name: hideNone
        type: string
      - default: y
        description: Whether to hide Beta fields
        enum:
        - y
        - n
        in: query
        name: hideBeta
        type: string
      responses:
        '404':
          description: Unknown experiment
      summary: Fetch an experiment given its identifier
      tags:
      - experiments
    parameters:
    - description: The package identifier. It must contain a $packageName and may
        include either a tag suffix (`:${tag}`) or a digest suffix (`@${digest}`).
        If both suffixes are missing then the identifier implies the `:latest` tag
        suffix.
      in: path
      name: identifier
      required: true
      type: string
  /experiments/{identifier}/dsl:
    get:
      operationId: get_experiment_dsl
      parameters:
      - default: json
        description: Output format
        enum:
        - json
        - yaml
        in: query
        name: outputFormat
        type: string
      responses:
        '404':
          description: Unknown experiment
      summary: Fetch the DSL of an experiment given its identifier
      tags:
      - experiments
    parameters:
    - description: The package identifier. It must contain a $packageName and may
        include either a tag suffix (`:${tag}`) or a digest suffix (`@${digest}`).
        If both suffixes are missing then the identifier implies the `:latest` tag
        suffix.
      in: path
      name: identifier
      required: true
      type: string
  /experiments/{identifier}/package-inheritance:
    get:
      description: "It returns a Dictionary with the format ::\n\n    {\n        \"\
        result\": {\n            \"variables\": {\n                \"<variable name>\"\
        : {\n                    \"fromBasePackage\": \"name of base package from\
        \ which variable receives its value\",\n                    \"values\": [\n\
        \                        {\n                            \"value\": \"the value\
        \ of the variable in the platform\",\n                            \"platform\"\
        : \"the platform name\",\n\n                            \"overrides\": [\n\
        \                                # Optional - explains which values in other\
        \ basePackages this value overrides\n                                {\n \
        \                                   \"fromBasePackage\": \"the other base\
        \ package which is overridden\",\n                                    \"value\"\
        : \"the value of this variable, in the other base package\n              \
        \                                for this platform\",\n                  \
        \              }\n                            [\n                        },\n\
        \                    ]\n                }\n            }\n        }\n    }"
      operationId: get_experiment_explain
      responses:
        '404':
          description: Unknown experiment
      summary: Explain how variables of multi-base-package experiments receive their
        values
      tags:
      - experiments
    parameters:
    - description: The package identifier. It must contain a $packageName and may
        include either a tag suffix (`:${tag}`) or a digest suffix (`@${digest}`).
        If both suffixes are missing then the identifier implies the `:latest` tag
        suffix.
      in: path
      name: identifier
      required: true
      type: string
  /experiments/{identifier}/start:
    parameters:
    - description: The package identifier. It must contain a $packageName and may
        include either a tag suffix (`:${tag}`) or a digest suffix (`@${digest}`).
        If both suffixes are missing then the identifier implies the `:latest` tag
        suffix.
      in: path
      name: identifier
      required: true
      type: string
    post:
      operationId: post_experiment_start
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/experiment-start'
      responses:
        '200':
          description: <rest_uid_of_new_experiment_instance>
        '400':
          description: Malformed experiment creation request
        '404':
          description: Experiment not found
        '500':
          description: Internal error while creating experiment
      summary: Start an experiment given its identifier
      tags:
      - experiments
  /experiments/{identifier}/start/payload/:
    get:
      operationId: get_get_payload_to_start
      responses:
        '200':
          description: The payload skeleton with magicValues explaining it
        '404':
          description: Experiment not found
        '500':
          description: Internal error while generating the experiment start payload
      summary: Returns a skeleton payload to /experiments/<identifier>/start for an
        experiment
      tags:
      - experiments
    parameters:
    - description: The package identifier. It must contain a $packageName and may
        include either a tag suffix (`:${tag}`) or a digest suffix (`@${digest}`).
        If both suffixes are missing then the identifier implies the `:latest` tag
        suffix.
      in: path
      name: identifier
      required: true
      type: string
  /experiments/{identifier}/tag:
    parameters:
    - description: The package identifier. It must contain a $packageName and may
        include either a tag suffix (`:${tag}`) or a digest suffix (`@${digest}`).
        If both suffixes are missing then the identifier implies the `:latest` tag
        suffix.
      in: path
      name: identifier
      required: true
      type: string
    put:
      operationId: put_experiment_package_tag
      parameters:
      - description: 'Comma separated tags to replace those associated with the $identifier.
          Each tag must contain lowercase letters, numbers, and -. characters. Each
          tag must start and end with a lowercase letter or a number. The service
          will untag other parameterised packages with the same `metadata.package.name`
          to ensure that the $newTags are only associated with the parameterised package
          $identifier. If the definition of the $identifier contains the `latest`
          tag then $newTags must also contain the `latest` tag. '
        in: query
        name: newTags
        required: true
        type: string
      responses:
        '404':
          description: No matching parameterised package
        '500':
          description: Internal error while updating tags of parameterised package
      summary: Updates the tags associated with the parameterised package that matches
        the identifier
      tags:
      - experiments
  /experiments/{package_name}/history:
    get:
      operationId: get_experiment_package_history
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/package-history'
        '400':
          description: Malformed experiment creation request
        '404':
          description: No matching experiments found
        '500':
          description: Internal error while creating experiment
      summary: Returns the history of tags and digests for this package
      tags:
      - experiments
    parameters:
    - description: The package name. It must not include a tag (:${tag}) or a digest
        (@${digest})
      in: path
      name: package_name
      required: true
      type: string
  /image-pull-secrets/:
    get:
      description: registry urls.
      operationId: get_image_pull_secrets_list
      responses:
        '200':
          description: Success
          schema:
            default: {}
            example:
              k8s-secret-name:
              - url-docker-registry1
              - url-docker-registry2
            type: object
      summary: List all imagePullSecrets, returns a Dictionary whose keys are names
        of Secrets and values lists of docker
      tags:
      - image-pull-secrets
  /image-pull-secrets/{id}:
    get:
      description: imagePullSecret has pull access to
      operationId: get_image_pull_secret
      responses:
        '200':
          description: Success
          schema:
            description: GET model for imagePullSecret with a given id
            example:
            - url-docker-registry1
            - url-docker-registry2
            items:
              description: docker registry, e.g. res-drl-hpc-docker-local.artifactory.swg-devops.com
              example: url-docker-registry
              type: string
            type: array
        '404':
          description: imagePullSecret not found
        '500':
          description: Internal error while retrieving imagePullSecret details
      summary: Get imagePullSecret, returns a list of strings, each of which is a
        docker registry that the specified
      tags:
      - image-pull-secrets
    parameters:
    - description: The imagePullSecret identifier
      in: path
      name: id
      required: true
      type: string
    post:
      description: 'This method does not check whether the contents of the Secret
        object are correct. In the remainder of this

        text @configuration IS the contents of the `config.json` key of the `st4sd-runtime-service`
        ConfigMap

        (or the ConfigMap object that the environment variable `CONSUMABLE_COMPUTING_CONFIGMAP_NAME`
        points to)


        if imagePullSecret is already defined in in the @configuration this method
        returns 422

        (imagePullSecret already exists).


        if the imagePullSecret is not defined in the @configuration BUT the associated
        kubernetes object exists

        this method will NOT override the contents of the Secret object with the contents
        of the request. It will

        return 409 (imagePullSecret conflict with existing Secret object with the
        same name)


        if the imagePullSecret is successfully created it will be available to use
        within a couple of minutes after

        Kubernetes asynchronously refreshes the file whose contents are the @configuration.'
      operationId: post_image_pull_secret
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/imagepullsecret'
      responses:
        '200':
          description: Success
        '404':
          description: imagePullSecret not found
        '409':
          description: imagePullSecret already exists
        '422':
          description: imagePullSecret conflicts with existing Secret object with
            the same name
        '500':
          description: Internal error while retrieving imagePullSecret details
      summary: Create a new imagePullSecret
      tags:
      - image-pull-secrets
    put:
      description: 'This method does not check whether the contents of the Secret
        object are correct. In the remainder of this

        text @configuration IS the contents of the `config.json` key of the `st4sd-runtime-service`
        ConfigMap

        (or the ConfigMap object that the environment variable `CONSUMABLE_COMPUTING_CONFIGMAP_NAME`
        points to)


        if imagePullSecret is already defined in in the @configuration this method
        returns 422

        (imagePullSecret already exists).


        if the imagePullSecret is not defined in the @configuration BUT the associated
        kubernetes object exists

        this method will NOT override the contents of the Secret object with the contents
        of the request. It will

        return 409 (imagePullSecret conflict with existing Secret object with the
        same name)


        if the imagePullSecret is successfully created it will be available to use
        within a couple of minutes after

        Kubernetes asynchronously refreshes the file whose contents are the @configuration.'
      operationId: put_image_pull_secret
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/imagepullsecret'
      responses:
        '200':
          description: Success
        '404':
          description: imagePullSecret not found
        '500':
          description: Internal error while retrieving imagePullSecret details
      summary: Update an existing imagePullSecret
      tags:
      - image-pull-secrets
  /instances/:
    get:
      operationId: get_instance_experiment_list
      parameters:
      - description: An optional fields mask
        format: mask
        in: header
        name: X-Fields
        type: string
      responses:
        '200':
          description: Success
          schema:
            items:
              $ref: '#/definitions/experiment-instance'
            type: array
      summary: List all instances of experiments
      tags:
      - instances
  /instances/{id}:
    delete:
      operationId: delete_instance
      responses:
        '404':
          description: Instance not found
      tags:
      - instances
    get:
      operationId: get_instance
      parameters:
      - description: Comma separated columns found in the properties dataframe, or
          empty string, or `*` which is translated to "all columns in properties dataframe".
          Column query is case insensitive and returned DataFrame has columns with
          lowercase names Method silently discards columns that do not exist in DataFrame.
          When this argument exists, this method inserts
        in: query
        name: includeProperties
        type: string
      - default: false
        description: A boolean flag that allows converting NaN and infinite values
          to strings.
        in: query
        name: stringifyNaN
        type: boolean
      responses:
        '404':
          description: Instance not found
      summary: Fetch an instance given its name
      tags:
      - instances
    parameters:
    - description: The instance identifier
      in: path
      name: id
      required: true
      type: string
  /instances/{id}/outputs:
    get:
      operationId: get_instance_outputs
      responses:
        '404':
          description: Instance not found
      summary: Fetch outputs of an instance given its identifier
      tags:
      - instances
    parameters:
    - description: The instance identifier
      in: path
      name: id
      required: true
      type: string
  /instances/{id}/outputs/{key}:
    get:
      operationId: get_instance_outputs_key
      responses:
        '400':
          description: Treated a file output as a folder OR asked for a file that
            is contained outside the tree of a folder key-output (look for field isFolder
            OR fileInFolder to differentiate)
        '404':
          description: Instance OR key-output OR output-path not found (look for field
            unknownInstance OR outputsReady OR missingPath to differentiate)
        '500':
          description: Internal exception while handling request
      summary: Fetch outputs of an instance given its identifier
      tags:
      - instances
    parameters:
    - description: The output key identifier
      in: path
      name: key
      required: true
      type: string
    - description: The instance identifier
      in: path
      name: id
      required: true
      type: string
  /instances/{id}/properties:
    get:
      operationId: get_instance_properties
      parameters:
      - default: '*'
        description: Comma separated columns found in the properties dataframe, or
          empty string, or `*` which is translated to "all columns in properties dataframe".
          Column query is case insensitive and returned DataFrame has columns with
          lowercase names Method silently discards columns that do not exist in DataFrame.
        in: query
        name: includeProperties
        type: string
      - default: false
        description: A boolean flag that allows converting NaN and infinite values
          to strings.
        in: query
        name: stringifyNaN
        type: boolean
      responses:
        '400':
          description: Instance has not finished measuring properties yet, or there
            was a problem loading the properties
        '404':
          description: Instance not found
      summary: Fetch columns from the measured properties of an instance given its
        identifier
      tags:
      - instances
    parameters:
    - description: The instance identifier
      in: path
      name: id
      required: true
      type: string
  /instances/{id}/status:
    get:
      description: "The status field contains:\n- `exit-status`: The status of the\
        \ completed experiment. This receives its final value *after* `experiment-state`\
        \ transitions to either `finished` or `failed`. Value is one of `[\"Success\"\
        , \"Failed\", \"Stopped\", \"\"]`. Value may be empty while Kubernetes initializes\
        \ opbjects.\n- `experiment-state`: Indicates the state of the orchestrator\
        \ that is executing the experiment tasks. **Not** to be confused with status\
        \ of experiment (`exit-status`). For example, an experiment status can have\
        \ `experiment-state=finished` with `exit-status=failed`. This means that the\
        \ experiment completed with a failure. The value of `experiment-state` is\
        \ one of `[\"unscheduled\", \"running\", \"finished\", \"failed\", \"unschedulable\"\
        , \"\"]`. Value may be empty while Kubernetes initializes opbjects.\n- `stage-state`:\
        \ Indicates the state of the active stage in the experiment with the lowest\
        \ stage index. Value is one of `[\"Initializing\", \"finished\", \"waiting_on_resource\"\
        ,\"running\", \"component_shutdown\", \"failed\"]`\n- `error-description`:\
        \ A string, which when printed is a human readable description that explains\
        \ why `exit-status` is `Failed`.\n- `total-progress`: A number in [0.0, 1.0]\
        \ indicating the progress of the experiment. Note that workflow developers\
        \ may decide to control this value.\n- `stage-progress`: A number in [0.0,\
        \ 1.0] indicating the progress of the active stage with the lowest stage index.\
        \ Note that workflow developers may decide to control this value.\n- `stages`:\
        \ A list of human-readable stage names\n- `current-stage`: UID of stage (e.g.\
        \ `stage0`)\n- `meta`: This is a nested dictionary\n  - `arguments`: The command-line\
        \ of the orchestrator\n  - `data`: The list of files that override data files\n\
        \  - `input`: The list of input files\n  - `pid`: The process ID of the st4sd\
        \ orchestrator\n  - `platform`: The name of the platform that the virtual\
        \ experiment instance executes\n  - `userVariables`: User provided variables,\
        \ the schema is  `{'global':{name:value}, 'stages':{index:{name:value}}}`\n\
        \  - `variables`: Global and stage variables active in the `platform`-scope\
        \ that the virtual experiment executes. The schema is `{'global':{name:value},\
        \ 'stages':{index:{name:value}}}`\n  - `hybridPlatform`: Name of hybrid-platform\
        \ for communicating with LSF (can be None),\n  - `userMetadata`: A dictionary\
        \ with `key(str): Any` value pairs that users can provide\n  - `instanceName`:\
        \ The name of the directory containing the virtual experiment instance.\n\
        \  - `version`: The version of the st4sd orchestrator"
      operationId: get_instance_status
      responses:
        '404':
          description: Instance not found
      summary: Fetch status of an instance given its identifier
      tags:
      - instances
    parameters:
    - description: The instance identifier
      in: path
      name: id
      required: true
      type: string
  /internal-experiments/:
    post:
      operationId: post_internal_experiments
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/internal-experiment'
      responses:
        '200':
          description: Success
      tags:
      - internal-experiments
  /library/:
    get:
      operationId: get_utility_dsl
      responses:
        '200':
          description: Success
      summary: Returns the contents of the Graph library - an array of Graphs
      tags:
      - library
    post:
      operationId: post_utility_dsl
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/library-graph'
      responses:
        '200':
          description: Success
      summary: Validates a DSL graph and adds it to the library
      tags:
      - library
  /library/{name}/:
    delete:
      operationId: delete_utility_dsl
      responses:
        '200':
          description: Success
      summary: Removes 1 Graph from the library
      tags:
      - library
    parameters:
    - in: path
      name: name
      required: true
      type: string
  /query/experiments/:
    post:
      operationId: post_query_experiments
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/query-experiments'
      responses:
        '200':
          description: Success
      tags:
      - query
  /query/relationships/:
    post:
      operationId: post_query_relationships
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/query-relationships'
      responses:
        '200':
          description: Success
      tags:
      - query
  /relationships/:
    get:
      operationId: get_relationships
      parameters:
      - default: json
        description: Output format
        enum:
        - json
        - python
        - python-pretty
        in: query
        name: outputFormat
        type: string
      - default: y
        description: Whether to hide fields whose value is None
        enum:
        - y
        - n
        in: query
        name: hideNone
        type: string
      responses:
        '200':
          description: Success
      tags:
      - relationships
    post:
      operationId: post_relationships
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/relationship'
      responses:
        '200':
          description: Success
      tags:
      - relationships
  /relationships/{identifier}/:
    delete:
      operationId: delete_relationship
      responses:
        '200':
          description: Success
      tags:
      - relationships
    get:
      operationId: get_relationship
      responses:
        '200':
          description: Success
      tags:
      - relationships
    parameters:
    - in: path
      name: identifier
      required: true
      type: string
  /relationships/{identifier}/preview/synthesize/dsl/:
    get:
      description: "It returns a Dictionary with the format ::\n\n    {\n        \"\
        dsl\": { the dictionary representing the DSL of the computational graph },\n\
        \        \"experiment\": { the dictionary representing the parameterised virtual\
        \ experiment package that\n                        would have been created\
        \ in the registry },\n        \"explanation\": { the dictionary explaining\
        \ how variables in the graph receive their value },\n        \"problems\"\
        : [ a list of potential issues/warnings ]\n    }"
      operationId: get_transform_dsl_preview
      parameters:
      - default: 2.0.0_0.1.0
        description: DSL version to return
        enum:
        - 2.0.0_0.1.0
        - '1'
        in: query
        name: dslVersion
        type: string
      - default: ''
        description: If dslVersion != 1, then this is the name of the platform to
          preview. If empty, preview the platform that is common between the 2 PVEPs
          of the relationship. If there are multiple platforms then pick the first
          one based on lexicographical order (excluding `default`)
        in: query
        name: platform
        type: string
      responses:
        '200':
          description: Success
      summary: Previews the DSL and parameterised virtual experiment package of a
        would-be synthesized experiment
      tags:
      - relationships
    parameters:
    - in: path
      name: identifier
      required: true
      type: string
  /relationships/{identifier}/synthesize/{new_package_name}/:
    parameters:
    - in: path
      name: identifier
      required: true
      type: string
    - in: path
      name: new_package_name
      required: true
      type: string
    post:
      operationId: post_transform_synthesize
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/relationship-synthesize'
      responses:
        '200':
          description: Success
      summary: Synthesizes a new experiment and stores it in the registry using the
        <identifier> relationship
      tags:
      - relationships
  /url-map/:
    get:
      description: '- consumable-computing

        - cdb-rest

        - cdb-gateway-registry


        FIXME: The above names are deprecated and should change to:

        - st4sd-runtime-service

        - st4sd-datastore-mongodb-proxy

        - st4sd-datastore-registry


        Prioritizes global Datastore routes (if available).'
      operationId: get_url_map_all
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorised
        '500':
          description: Internal error while generating url-map
      summary: 'Returns a dictionary containing the URL of each of the keys:'
      tags:
      - url-map
  /url-map/{service}:
    get:
      description: '- consumable-computing

        - cdb-rest

        - cdb-gateway-registry


        FIXME: The above names are deprecated and should change to:

        - st4sd-runtime-service

        - st4sd-datastore-mongodb-proxy

        - st4sd-datastore-registry


        Prioritizes global Datastore routes (if available).'
      operationId: get_url_service
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorised
        '404':
          description: Unknown service
        '500':
          description: Internal error while generating url-map
      summary: 'Returns the URL of one of the services:'
      tags:
      - url-map
    parameters:
    - description: Service identifier (i.e consumable-computing, cdb-rest, cdb-gateway-registry)
      in: path
      name: service
      required: true
      type: string
  /utilities/dsl/:
    post:
      operationId: post_utility_dsl
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/utilities-dsl'
      responses:
        '200':
          description: Success
      summary: Validates a DSL workflow and its associated Parameterised Virtual Experiment
        Package (PVEP) definition
      tags:
      - utilities
  /utilities/pvep/:
    post:
      description: starting from an optional PVEP template
      operationId: post_utility_pvep
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/utilities-pvep'
      responses:
        '200':
          description: Success
      summary: Generates the default Parameterised Virtual Experiment Package (PVEP)
        for a DSL workflow
      tags:
      - utilities
produces:
- application/json
responses:
  MaskError:
    description: When any error occurs on mask
  ParseError:
    description: When a mask can't be parsed
tags:
- description: Operations to interact with authorization token(s)
  name: authorisation
- description: Experiments related operations
  name: experiments
- description: Operations to create an experiment whose workflow is hosted in the
    internal storage
  name: internal-experiments
- description: Instances of Experiments related operations
  name: instances
- description: Operations to view/create/edit imagePullSecrets
  name: image-pull-secrets
- description: Query operations
  name: query
- name: relationships
- description: Operations to interact with workflow software stack URLs
  name: url-map
- description: Datashim related operations
  name: datasets
- description: Utility operations
  name: utilities
- description: Graph library operations
  name: library
